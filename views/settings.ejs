<!DOCTYPE html>
<html lang="en" data-bs-theme="auto">

<head>
    <script src="../public/js/color-modes.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.min.css" />
    <link rel="shortcut icon" href="../public/img/ali.png" type="image/x-icon">
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="Settings" />
    <title>Settings</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="../public/css/dark-light.css" rel="stylesheet" />
    <link rel="stylesheet" href="../public/css/myStyle.css" />
    <link rel="stylesheet" href="../public/css/loginStyle.css" />

    <style>
        .settings-container {
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 2rem 0;
        }

        .settings-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            max-width: 800px;
            width: 100%;
            margin: 0 auto;
        }

        .settings-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 2rem;
            text-align: center;
            color: white;
            border-radius: 20px 20px 0 0;
        }

        .settings-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .settings-subtitle {
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .settings-body {
            padding: 3rem 2rem;
        }

        .settings-section {
            margin-bottom: 3rem;
            padding: 2rem;
            background: #f8f9fa;
            border-radius: 15px;
            border: 1px solid #e9ecef;
        }

        .settings-section h3 {
            color: #2c3e50;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .form-floating {
            margin-bottom: 1.5rem;
        }

        .form-floating .form-control {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 1rem 0.75rem 0.5rem 3rem;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-floating .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .form-floating .form-control:not(:placeholder-shown) {
            padding-top: 1.625rem;
            padding-bottom: 0.625rem;
        }

        .form-floating label {
            padding: 1rem 0.75rem 0.5rem 3rem;
            color: #6c757d;
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            z-index: 3;
        }

        .btn-settings {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 12px;
            padding: 0.875rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-settings:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
        }

        .btn-danger-settings {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            border: none;
            border-radius: 12px;
            padding: 0.875rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
        }

        .btn-danger-settings:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(220, 53, 69, 0.4);
        }

        .btn-secondary-settings {
            background: transparent;
            color: #6c757d;
            border: 2px solid #6c757d;
            border-radius: 12px;
            padding: 0.875rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
        }

        .btn-secondary-settings:hover {
            background: #6c757d;
            color: white;
            transform: translateY(-2px);
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 2rem;
        }

        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked+.slider {
            background-color: #667eea;
        }

        input:checked+.slider:before {
            transform: translateX(26px);
        }

        .setting-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
            border-bottom: 1px solid #e9ecef;
        }

        .setting-item:last-child {
            border-bottom: none;
        }

        .setting-info h5 {
            margin: 0;
            color: #2c3e50;
            font-weight: 600;
        }

        .setting-info p {
            margin: 0.25rem 0 0 0;
            color: #6c757d;
            font-size: 0.9rem;
        }

        .current-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #667eea;
        }

        .file-upload-container {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .file-upload-input {
            display: none;
        }

        .file-upload-label {
            display: block;
            width: 100%;
            padding: 1rem 0.75rem 0.5rem 3rem;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            background-color: #fff;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            min-height: 58px;
        }

        .file-upload-label:hover {
            border-color: #667eea;
        }

        .file-upload-label.has-file {
            border-color: #28a745;
            background-color: #f8fff9;
        }

        .file-upload-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            z-index: 3;
        }

        .file-upload-text {
            position: absolute;
            left: 3rem;
            top: 1rem;
            color: #6c757d;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

        .file-upload-filename {
            position: absolute;
            left: 3rem;
            top: 0.5rem;
            color: #28a745;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .file-upload-label:focus-within {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        /* Dark mode support */
        [data-bs-theme="dark"] .settings-card {
            background: rgba(33, 37, 41, 0.95);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        [data-bs-theme="dark"] .settings-title {
            color: #f8f9fa;
        }

        [data-bs-theme="dark"] .settings-subtitle {
            color: #adb5bd;
        }

        [data-bs-theme="dark"] .settings-section {
            background: rgba(255, 255, 255, 0.05);
            border-color: rgba(255, 255, 255, 0.1);
        }

        [data-bs-theme="dark"] .settings-section h3 {
            color: #f8f9fa;
        }

        [data-bs-theme="dark"] .form-floating .form-control {
            background-color: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.2);
            color: #f8f9fa;
        }

        [data-bs-theme="dark"] .form-floating .form-control:focus {
            background-color: rgba(255, 255, 255, 0.15);
            border-color: #667eea;
        }

        [data-bs-theme="dark"] .form-floating label {
            color: #adb5bd;
        }

        [data-bs-theme="dark"] .input-icon {
            color: #adb5bd;
        }

        [data-bs-theme="dark"] .file-upload-label {
            background-color: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.2);
            color: #f8f9fa;
        }

        [data-bs-theme="dark"] .file-upload-label:hover {
            border-color: #667eea;
        }

        [data-bs-theme="dark"] .file-upload-icon {
            color: #adb5bd;
        }

        [data-bs-theme="dark"] .file-upload-text {
            color: #adb5bd;
        }

        [data-bs-theme="dark"] .setting-item {
            border-bottom-color: rgba(255, 255, 255, 0.1);
        }

        [data-bs-theme="dark"] .setting-info h5 {
            color: #f8f9fa;
        }

        [data-bs-theme="dark"] .setting-info p {
            color: #adb5bd;
        }

        /* Mobile responsiveness */
        @media (max-width: 768px) {
            .settings-container {
                padding: 1rem 0;
            }

            .settings-body {
                padding: 2rem 1rem;
            }

            .settings-header {
                padding: 1.5rem;
            }

            .settings-title {
                font-size: 1.5rem;
            }

            .settings-section {
                padding: 1.5rem;
            }

            .action-buttons {
                flex-direction: column;
                align-items: center;
            }

            .btn-settings,
            .btn-danger-settings,
            .btn-secondary-settings {
                width: 100%;
                max-width: 300px;
            }
        }
    </style>
</head>

<body>
    <div class="settings-container">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-10">
                    <div class="settings-card">
                        <!-- Settings Header -->
                        <div class="settings-header">
                            <h1 class="settings-title">Settings</h1>
                            <p class="settings-subtitle">Manage your account preferences and security</p>
                        </div>

                        <!-- Settings Body -->
                        <div class="settings-body">
                            <% if (typeof message !=='undefined' && message) { %>
                                <div class="alert alert-success alert-dismissible fade show" role="alert">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <%= message %>
                                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                </div>
                                <% } %>

                                    <% if (typeof error !=='undefined' && error) { %>
                                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                            <i class="bi bi-exclamation-triangle me-2"></i>
                                            <%= error %>
                                                <button type="button" class="btn-close"
                                                    data-bs-dismiss="alert"></button>
                                        </div>
                                        <% } %>

                                            <!-- Profile Settings -->
                                            <div class="settings-section">
                                                <h3>
                                                    <i class="bi bi-person-circle"></i>
                                                    Profile Settings
                                                </h3>

                                                <div class="row">
                                                    <div class="col-md-4 text-center mb-3">
                                                        <img src="<%= user.profilePicture || '../public/img/ali.png' %>"
                                                            class="current-avatar" alt="Current Profile Picture"
                                                            onerror="this.src='../public/img/ali.png'">
                                                        <p class="text-muted mt-2">Current Avatar</p>
                                                    </div>
                                                    <div class="col-md-8">
                                                        <div class="file-upload-container">
                                                            <input type="file" class="file-upload-input"
                                                                id="profilePicture" name="profilePicture"
                                                                accept="image/*">
                                                            <label for="profilePicture" class="file-upload-label"
                                                                id="fileUploadLabel">
                                                                <i class="bi bi-camera file-upload-icon"></i>
                                                                <span class="file-upload-text">Change Profile
                                                                    Picture</span>
                                                                <span class="file-upload-filename d-none"></span>
                                                            </label>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="action-buttons">
                                                    <button type="button" class="btn btn-settings"
                                                        onclick="updateProfilePicture()">
                                                        <i class="bi bi-upload me-2"></i>
                                                        Update Picture
                                                    </button>
                                                </div>
                                            </div>

                                            <!-- Password Change -->
                                            <div class="settings-section">
                                                <h3>
                                                    <i class="bi bi-shield-lock"></i>
                                                    Security Settings
                                                </h3>

                                                <form id="passwordForm">
                                                    <div class="form-floating position-relative">
                                                        <i class="bi bi-lock input-icon"></i>
                                                        <input type="password" class="form-control" id="currentPassword"
                                                            name="currentPassword" placeholder="Current Password"
                                                            required>
                                                        <label for="currentPassword">Current Password</label>
                                                    </div>

                                                    <div class="form-floating position-relative">
                                                        <i class="bi bi-key input-icon"></i>
                                                        <input type="password" class="form-control" id="newPassword"
                                                            name="newPassword" placeholder="New Password" required>
                                                        <label for="newPassword">New Password</label>
                                                    </div>

                                                    <div class="form-floating position-relative">
                                                        <i class="bi bi-key-fill input-icon"></i>
                                                        <input type="password" class="form-control" id="confirmPassword"
                                                            name="confirmPassword" placeholder="Confirm New Password"
                                                            required>
                                                        <label for="confirmPassword">Confirm New Password</label>
                                                    </div>

                                                    <div class="action-buttons">
                                                        <button type="submit" class="btn btn-settings">
                                                            <i class="bi bi-shield-check me-2"></i>
                                                            Change Password
                                                        </button>
                                                    </div>
                                                </form>
                                            </div>

                                            <!-- Danger Zone -->
                                            <div class="settings-section" style="border-color: #dc3545;">
                                                <h3 style="color: #dc3545;">
                                                    <i class="bi bi-exclamation-triangle"></i>
                                                    Danger Zone
                                                </h3>

                                                <div class="setting-item">
                                                    <div class="setting-info">
                                                        <h5>Delete Account</h5>
                                                        <p>Permanently delete your account and all associated data</p>
                                                    </div>
                                                    <button type="button" class="btn btn-danger-settings"
                                                        onclick="confirmDeleteAccount()">
                                                        <i class="bi bi-trash me-2"></i>
                                                        Delete Account
                                                    </button>
                                                </div>

                                                <div class="setting-item">
                                                    <div class="setting-info">
                                                        <h5>Export Data</h5>
                                                        <p>Download a copy of your personal data</p>
                                                    </div>
                                                    <button type="button" class="btn btn-secondary-settings"
                                                        onclick="exportData()">
                                                        <i class="bi bi-download me-2"></i>
                                                        Export Data
                                                    </button>
                                                </div>
                                            </div>

                                            <!-- Navigation -->
                                            <div class="action-buttons">
                                                <a href="/user/profile" class="btn btn-secondary-settings">
                                                    <i class="bi bi-arrow-left me-2"></i>
                                                    Back to Profile
                                                </a>
                                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="../public/js/bootstrap.bundle.min.js"></script>
    <script src="../public/js/main.js"></script>

    <script>
        // Handle file upload display
        document.getElementById('profilePicture').addEventListener('change', function (e) {
            const label = document.getElementById('fileUploadLabel');
            const text = label.querySelector('.file-upload-text');
            const filename = label.querySelector('.file-upload-filename');
            const currentAvatar = document.querySelector('.current-avatar');

            if (e.target.files.length > 0) {
                const file = e.target.files[0];
                label.classList.add('has-file');
                text.classList.add('d-none');
                filename.textContent = file.name;
                filename.classList.remove('d-none');

                // Preview the new image
                const reader = new FileReader();
                reader.onload = function (e) {
                    currentAvatar.src = e.target.result;
                };
                reader.readAsDataURL(file);
            } else {
                label.classList.remove('has-file');
                text.classList.remove('d-none');
                filename.classList.add('d-none');
            }
        });

        // Update profile picture
        function updateProfilePicture() {
            const fileInput = document.getElementById('profilePicture');
            if (fileInput.files.length === 0) {
                alert('Please select a file first');
                return;
            }

            const formData = new FormData();
            formData.append('profilePicture', fileInput.files[0]);

            fetch('/user/settings/profile-picture', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showMessage('Profile picture updated successfully!', 'success');
                    } else {
                        showMessage(data.message || 'Error updating profile picture', 'error');
                    }
                })
                .catch(error => {
                    showMessage('Error updating profile picture', 'error');
                });
        }

        // Handle password change form
        document.getElementById('passwordForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const passwordData = {
                currentPassword: formData.get('currentPassword'),
                newPassword: formData.get('newPassword'),
                confirmPassword: formData.get('confirmPassword')
            };

            if (passwordData.newPassword !== passwordData.confirmPassword) {
                showMessage('New passwords do not match', 'error');
                return;
            }

            fetch('/user/settings/password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(passwordData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showMessage('Password changed successfully!', 'success');
                        this.reset();
                    } else {
                        showMessage(data.message || 'Error changing password', 'error');
                    }
                })
                .catch(error => {
                    showMessage('Error changing password', 'error');
                });
        });

        // Confirm delete account
        function confirmDeleteAccount() {
            if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
                if (confirm('This will permanently delete all your data. Type "DELETE" to confirm.')) {
                    const confirmation = prompt('Type "DELETE" to confirm account deletion:');
                    if (confirmation === 'DELETE') {
                        deleteAccount();
                    } else {
                        showMessage('Account deletion cancelled', 'error');
                    }
                }
            }
        }

        // Delete account
        function deleteAccount() {
            fetch('/user/settings/delete-account', {
                method: 'DELETE'
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showMessage('Account deleted successfully', 'success');
                        setTimeout(() => {
                            window.location.href = '/auth/login';
                        }, 2000);
                    } else {
                        showMessage(data.message || 'Error deleting account', 'error');
                    }
                })
                .catch(error => {
                    showMessage('Error deleting account', 'error');
                });
        }

        // Export data
        function exportData() {
            fetch('/user/settings/export-data')
                .then(response => response.blob())
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'my-data-export.json';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    showMessage('Data exported successfully!', 'success');
                })
                .catch(error => {
                    showMessage('Error exporting data', 'error');
                });
        }

        // Show message function
        function showMessage(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const icon = type === 'success' ? 'bi-check-circle' : 'bi-exclamation-triangle';

            const alertDiv = document.createElement('div');
            alertDiv.className = `alert ${alertClass} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                <i class="bi ${icon} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            const container = document.querySelector('.settings-body');
            container.insertBefore(alertDiv, container.firstChild);

            // Auto remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }
    </script>
</body>

</html>